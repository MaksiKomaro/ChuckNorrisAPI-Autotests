{"uid":"df5c1c02c661171d","name":"Неправильная категория","fullName":"tests.test_wrong_requests#test_failed_by_wrong_category","historyId":"82d026036ee14a847c32c9d0577e8e7d","time":{"start":1750076256050,"stop":1750076256690,"duration":640},"description":"Тест попытки получения фактов при неправильной категории. Намеренная ошибка!","descriptionHtml":"<p>Тест попытки получения фактов при неправильной категории. Намеренная ошибка!</p>\n","status":"skipped","statusMessage":"XFAIL\n\nAssertionError: assert 404 == 200\n +  where 404 = <Response [404 Not Found]>.status_code","statusTrace":"cnapi = <conftest.ChuckNorrisAPI object at 0x7fd5698892b0>\n\n    @allure.title('Неправильная категория')\n    @allure.description('Тест попытки получения фактов при неправильной категории. Намеренная ошибка!')\n    @allure.tag(\"ChuckNorris\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.label(\"owner\", \"Komarov Maksim\")\n    @pytest.mark.xfail\n    async def test_failed_by_wrong_category(cnapi):\n        '''Попытка получения фактов при неправильной категории.\n            Намеренная ошибка! Отмечен как xfail.\n        '''\n        r = await cnapi.get_random_joke_by_category('manualQA')\n>       assert r.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404 Not Found]>.status_code\n\ntests/test_wrong_requests.py:28: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"event_loop_policy","time":{"start":1750076243000,"stop":1750076243000,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cnapi","time":{"start":1750076243000,"stop":1750076243735,"duration":735},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"duration","time":{"start":1750076255339,"stop":1750076255339,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop","time":{"start":1750076256049,"stop":1750076256049,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Тест попытки получения фактов при неправильной категории. Намеренная ошибка!","status":"skipped","statusMessage":"XFAIL\n\nAssertionError: assert 404 == 200\n +  where 404 = <Response [404 Not Found]>.status_code","statusTrace":"cnapi = <conftest.ChuckNorrisAPI object at 0x7fd5698892b0>\n\n    @allure.title('Неправильная категория')\n    @allure.description('Тест попытки получения фактов при неправильной категории. Намеренная ошибка!')\n    @allure.tag(\"ChuckNorris\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.label(\"owner\", \"Komarov Maksim\")\n    @pytest.mark.xfail\n    async def test_failed_by_wrong_category(cnapi):\n        '''Попытка получения фактов при неправильной категории.\n            Намеренная ошибка! Отмечен как xfail.\n        '''\n        r = await cnapi.get_random_joke_by_category('manualQA')\n>       assert r.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404 Not Found]>.status_code\n\ntests/test_wrong_requests.py:28: AssertionError","steps":[],"attachments":[{"uid":"1bef0ba47c301f25","name":"log","source":"1bef0ba47c301f25.txt","type":"text/plain","size":227}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"event_loop::3","time":{"start":1750076256709,"stop":1750076256709,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop::_close_event_loop","time":{"start":1750076256709,"stop":1750076256709,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop::_restore_policy","time":{"start":1750076256709,"stop":1750076256709,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop::_provide_clean_event_loop","time":{"start":1750076256709,"stop":1750076256709,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"duration::0","time":{"start":1750076256709,"stop":1750076256710,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cnapi::finalizer","time":{"start":1750076256710,"stop":1750076256710,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"ChuckNorris"},{"name":"severity","value":"critical"},{"name":"owner","value":"Komarov Maksim"},{"name":"tag","value":"@pytest.mark.xfail"},{"name":"tag","value":"asyncio"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_wrong_requests"},{"name":"host","value":"pkrvmxyh4eaekms"},{"name":"thread","value":"2183-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_wrong_requests"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","owner":"Komarov Maksim","retries":[],"categories":[],"tags":["@pytest.mark.xfail","ChuckNorris","asyncio"]},"source":"df5c1c02c661171d.json","parameterValues":[]}